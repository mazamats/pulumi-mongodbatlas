// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly advancedConfiguration!: pulumi.Output<outputs.ClusterAdvancedConfiguration>;
    public readonly autoScalingDiskGbEnabled!: pulumi.Output<boolean | undefined>;
    public readonly backingProviderName!: pulumi.Output<string>;
    public readonly backupEnabled!: pulumi.Output<boolean | undefined>;
    public readonly biConnector!: pulumi.Output<outputs.ClusterBiConnector>;
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    public readonly clusterType!: pulumi.Output<string>;
    public readonly diskSizeGb!: pulumi.Output<number>;
    public readonly encryptionAtRestProvider!: pulumi.Output<string>;
    public readonly mongoDbMajorVersion!: pulumi.Output<string>;
    public /*out*/ readonly mongoDbVersion!: pulumi.Output<string>;
    public /*out*/ readonly mongoUri!: pulumi.Output<string>;
    public /*out*/ readonly mongoUriUpdated!: pulumi.Output<string>;
    public /*out*/ readonly mongoUriWithOptions!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly numShards!: pulumi.Output<number | undefined>;
    public /*out*/ readonly paused!: pulumi.Output<boolean>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly providerBackupEnabled!: pulumi.Output<boolean | undefined>;
    public readonly providerDiskIops!: pulumi.Output<number>;
    public readonly providerDiskTypeName!: pulumi.Output<string>;
    public readonly providerEncryptEbsVolume!: pulumi.Output<boolean>;
    public readonly providerInstanceSizeName!: pulumi.Output<string>;
    public readonly providerName!: pulumi.Output<string>;
    public readonly providerRegionName!: pulumi.Output<string>;
    public readonly providerVolumeType!: pulumi.Output<string>;
    public readonly replicationFactor!: pulumi.Output<number>;
    public readonly replicationSpecs!: pulumi.Output<outputs.ClusterReplicationSpec[]>;
    public /*out*/ readonly srvAddress!: pulumi.Output<string>;
    public /*out*/ readonly stateName!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClusterState | undefined;
            inputs["advancedConfiguration"] = state ? state.advancedConfiguration : undefined;
            inputs["autoScalingDiskGbEnabled"] = state ? state.autoScalingDiskGbEnabled : undefined;
            inputs["backingProviderName"] = state ? state.backingProviderName : undefined;
            inputs["backupEnabled"] = state ? state.backupEnabled : undefined;
            inputs["biConnector"] = state ? state.biConnector : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["clusterType"] = state ? state.clusterType : undefined;
            inputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            inputs["encryptionAtRestProvider"] = state ? state.encryptionAtRestProvider : undefined;
            inputs["mongoDbMajorVersion"] = state ? state.mongoDbMajorVersion : undefined;
            inputs["mongoDbVersion"] = state ? state.mongoDbVersion : undefined;
            inputs["mongoUri"] = state ? state.mongoUri : undefined;
            inputs["mongoUriUpdated"] = state ? state.mongoUriUpdated : undefined;
            inputs["mongoUriWithOptions"] = state ? state.mongoUriWithOptions : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["numShards"] = state ? state.numShards : undefined;
            inputs["paused"] = state ? state.paused : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["providerBackupEnabled"] = state ? state.providerBackupEnabled : undefined;
            inputs["providerDiskIops"] = state ? state.providerDiskIops : undefined;
            inputs["providerDiskTypeName"] = state ? state.providerDiskTypeName : undefined;
            inputs["providerEncryptEbsVolume"] = state ? state.providerEncryptEbsVolume : undefined;
            inputs["providerInstanceSizeName"] = state ? state.providerInstanceSizeName : undefined;
            inputs["providerName"] = state ? state.providerName : undefined;
            inputs["providerRegionName"] = state ? state.providerRegionName : undefined;
            inputs["providerVolumeType"] = state ? state.providerVolumeType : undefined;
            inputs["replicationFactor"] = state ? state.replicationFactor : undefined;
            inputs["replicationSpecs"] = state ? state.replicationSpecs : undefined;
            inputs["srvAddress"] = state ? state.srvAddress : undefined;
            inputs["stateName"] = state ? state.stateName : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            if (!args || args.providerInstanceSizeName === undefined) {
                throw new Error("Missing required property 'providerInstanceSizeName'");
            }
            if (!args || args.providerName === undefined) {
                throw new Error("Missing required property 'providerName'");
            }
            inputs["advancedConfiguration"] = args ? args.advancedConfiguration : undefined;
            inputs["autoScalingDiskGbEnabled"] = args ? args.autoScalingDiskGbEnabled : undefined;
            inputs["backingProviderName"] = args ? args.backingProviderName : undefined;
            inputs["backupEnabled"] = args ? args.backupEnabled : undefined;
            inputs["biConnector"] = args ? args.biConnector : undefined;
            inputs["clusterType"] = args ? args.clusterType : undefined;
            inputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            inputs["encryptionAtRestProvider"] = args ? args.encryptionAtRestProvider : undefined;
            inputs["mongoDbMajorVersion"] = args ? args.mongoDbMajorVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["numShards"] = args ? args.numShards : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["providerBackupEnabled"] = args ? args.providerBackupEnabled : undefined;
            inputs["providerDiskIops"] = args ? args.providerDiskIops : undefined;
            inputs["providerDiskTypeName"] = args ? args.providerDiskTypeName : undefined;
            inputs["providerEncryptEbsVolume"] = args ? args.providerEncryptEbsVolume : undefined;
            inputs["providerInstanceSizeName"] = args ? args.providerInstanceSizeName : undefined;
            inputs["providerName"] = args ? args.providerName : undefined;
            inputs["providerRegionName"] = args ? args.providerRegionName : undefined;
            inputs["providerVolumeType"] = args ? args.providerVolumeType : undefined;
            inputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            inputs["replicationSpecs"] = args ? args.replicationSpecs : undefined;
            inputs["clusterId"] = undefined /*out*/;
            inputs["mongoDbVersion"] = undefined /*out*/;
            inputs["mongoUri"] = undefined /*out*/;
            inputs["mongoUriUpdated"] = undefined /*out*/;
            inputs["mongoUriWithOptions"] = undefined /*out*/;
            inputs["paused"] = undefined /*out*/;
            inputs["srvAddress"] = undefined /*out*/;
            inputs["stateName"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    readonly advancedConfiguration?: pulumi.Input<inputs.ClusterAdvancedConfiguration>;
    readonly autoScalingDiskGbEnabled?: pulumi.Input<boolean>;
    readonly backingProviderName?: pulumi.Input<string>;
    readonly backupEnabled?: pulumi.Input<boolean>;
    readonly biConnector?: pulumi.Input<inputs.ClusterBiConnector>;
    readonly clusterId?: pulumi.Input<string>;
    readonly clusterType?: pulumi.Input<string>;
    readonly diskSizeGb?: pulumi.Input<number>;
    readonly encryptionAtRestProvider?: pulumi.Input<string>;
    readonly mongoDbMajorVersion?: pulumi.Input<string>;
    readonly mongoDbVersion?: pulumi.Input<string>;
    readonly mongoUri?: pulumi.Input<string>;
    readonly mongoUriUpdated?: pulumi.Input<string>;
    readonly mongoUriWithOptions?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly numShards?: pulumi.Input<number>;
    readonly paused?: pulumi.Input<boolean>;
    readonly projectId?: pulumi.Input<string>;
    readonly providerBackupEnabled?: pulumi.Input<boolean>;
    readonly providerDiskIops?: pulumi.Input<number>;
    readonly providerDiskTypeName?: pulumi.Input<string>;
    readonly providerEncryptEbsVolume?: pulumi.Input<boolean>;
    readonly providerInstanceSizeName?: pulumi.Input<string>;
    readonly providerName?: pulumi.Input<string>;
    readonly providerRegionName?: pulumi.Input<string>;
    readonly providerVolumeType?: pulumi.Input<string>;
    readonly replicationFactor?: pulumi.Input<number>;
    readonly replicationSpecs?: pulumi.Input<pulumi.Input<inputs.ClusterReplicationSpec>[]>;
    readonly srvAddress?: pulumi.Input<string>;
    readonly stateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    readonly advancedConfiguration?: pulumi.Input<inputs.ClusterAdvancedConfiguration>;
    readonly autoScalingDiskGbEnabled?: pulumi.Input<boolean>;
    readonly backingProviderName?: pulumi.Input<string>;
    readonly backupEnabled?: pulumi.Input<boolean>;
    readonly biConnector?: pulumi.Input<inputs.ClusterBiConnector>;
    readonly clusterType?: pulumi.Input<string>;
    readonly diskSizeGb?: pulumi.Input<number>;
    readonly encryptionAtRestProvider?: pulumi.Input<string>;
    readonly mongoDbMajorVersion?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly numShards?: pulumi.Input<number>;
    readonly projectId: pulumi.Input<string>;
    readonly providerBackupEnabled?: pulumi.Input<boolean>;
    readonly providerDiskIops?: pulumi.Input<number>;
    readonly providerDiskTypeName?: pulumi.Input<string>;
    readonly providerEncryptEbsVolume?: pulumi.Input<boolean>;
    readonly providerInstanceSizeName: pulumi.Input<string>;
    readonly providerName: pulumi.Input<string>;
    readonly providerRegionName?: pulumi.Input<string>;
    readonly providerVolumeType?: pulumi.Input<string>;
    readonly replicationFactor?: pulumi.Input<number>;
    readonly replicationSpecs?: pulumi.Input<pulumi.Input<inputs.ClusterReplicationSpec>[]>;
}
