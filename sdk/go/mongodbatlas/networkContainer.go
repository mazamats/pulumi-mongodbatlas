// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `.NetworkContainer` provides a Network Peering Container resource. The resource lets you create, edit and delete network peering containers. The resource requires your Project ID.
// 
// > **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
// 
// > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-mongodbatlas/blob/master/website/docs/r/network_container.html.markdown.
type NetworkContainer struct {
	s *pulumi.ResourceState
}

// NewNetworkContainer registers a new resource with the given unique name, arguments, and options.
func NewNetworkContainer(ctx *pulumi.Context,
	name string, args *NetworkContainerArgs, opts ...pulumi.ResourceOpt) (*NetworkContainer, error) {
	if args == nil || args.AtlasCidrBlock == nil {
		return nil, errors.New("missing required argument 'AtlasCidrBlock'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["atlasCidrBlock"] = nil
		inputs["projectId"] = nil
		inputs["providerName"] = nil
		inputs["region"] = nil
		inputs["regionName"] = nil
	} else {
		inputs["atlasCidrBlock"] = args.AtlasCidrBlock
		inputs["projectId"] = args.ProjectId
		inputs["providerName"] = args.ProviderName
		inputs["region"] = args.Region
		inputs["regionName"] = args.RegionName
	}
	inputs["azureSubscriptionId"] = nil
	inputs["containerId"] = nil
	inputs["gcpProjectId"] = nil
	inputs["networkName"] = nil
	inputs["provisioned"] = nil
	inputs["vnetName"] = nil
	inputs["vpcId"] = nil
	s, err := ctx.RegisterResource("mongodbatlas:index/networkContainer:NetworkContainer", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkContainer{s: s}, nil
}

// GetNetworkContainer gets an existing NetworkContainer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkContainer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkContainerState, opts ...pulumi.ResourceOpt) (*NetworkContainer, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["atlasCidrBlock"] = state.AtlasCidrBlock
		inputs["azureSubscriptionId"] = state.AzureSubscriptionId
		inputs["containerId"] = state.ContainerId
		inputs["gcpProjectId"] = state.GcpProjectId
		inputs["networkName"] = state.NetworkName
		inputs["projectId"] = state.ProjectId
		inputs["providerName"] = state.ProviderName
		inputs["provisioned"] = state.Provisioned
		inputs["region"] = state.Region
		inputs["regionName"] = state.RegionName
		inputs["vnetName"] = state.VnetName
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("mongodbatlas:index/networkContainer:NetworkContainer", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkContainer{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NetworkContainer) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NetworkContainer) ID() pulumi.IDOutput {
	return r.s.ID()
}

// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
func (r *NetworkContainer) AtlasCidrBlock() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["atlasCidrBlock"])
}

// Unique identifer of the Azure subscription in which the VNet resides.
func (r *NetworkContainer) AzureSubscriptionId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["azureSubscriptionId"])
}

// The Network Peering Container ID.
func (r *NetworkContainer) ContainerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["containerId"])
}

// Unique identifier of the GCP project in which the Network Peering connection resides.
func (r *NetworkContainer) GcpProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["gcpProjectId"])
}

// Name of the Network Peering connection in the Atlas project.
func (r *NetworkContainer) NetworkName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["networkName"])
}

// The unique ID for the project to create the database user.
func (r *NetworkContainer) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
func (r *NetworkContainer) ProviderName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["providerName"])
}

// Indicates whether the project has Network Peering connections deployed in the container.
func (r *NetworkContainer) Provisioned() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["provisioned"])
}

// Azure region where the container resides.
func (r *NetworkContainer) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// AWS region.
func (r *NetworkContainer) RegionName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["regionName"])
}

// The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
func (r *NetworkContainer) VnetName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vnetName"])
}

// Unique identifier of the project’s VPC.
func (r *NetworkContainer) VpcId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering NetworkContainer resources.
type NetworkContainerState struct {
	// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
	AtlasCidrBlock interface{}
	// Unique identifer of the Azure subscription in which the VNet resides.
	AzureSubscriptionId interface{}
	// The Network Peering Container ID.
	ContainerId interface{}
	// Unique identifier of the GCP project in which the Network Peering connection resides.
	GcpProjectId interface{}
	// Name of the Network Peering connection in the Atlas project.
	NetworkName interface{}
	// The unique ID for the project to create the database user.
	ProjectId interface{}
	// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
	ProviderName interface{}
	// Indicates whether the project has Network Peering connections deployed in the container.
	Provisioned interface{}
	// Azure region where the container resides.
	Region interface{}
	// AWS region.
	RegionName interface{}
	// The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
	VnetName interface{}
	// Unique identifier of the project’s VPC.
	VpcId interface{}
}

// The set of arguments for constructing a NetworkContainer resource.
type NetworkContainerArgs struct {
	// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
	AtlasCidrBlock interface{}
	// The unique ID for the project to create the database user.
	ProjectId interface{}
	// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
	ProviderName interface{}
	// Azure region where the container resides.
	Region interface{}
	// AWS region.
	RegionName interface{}
}
