// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `.PrivateIpMode` provides a Private IP Mode resource. This allows one to enable/disable Connect via Peering Only mode for a MongoDB Atlas Project.
// 
// 
// > **IMPORTANT**: <br>**What is Connect via Peering Only Mode?** <br>Connect via Peering Only mode prevents clusters in an Atlas project from connecting to any network destination other than an Atlas Network Peer. Connect via Peering Only mode applies only to **GCP** and **Azure-backed** dedicated clusters. This setting disables the ability to: <br><br>• Deploy non-GCP or Azure-backed dedicated clusters in an Atlas project, and
// <br>• Use MongoDB Stitch with dedicated clusters in an Atlas project.
// 
// 
// > **NOTE:** You should create one privateIpMode per project.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-mongodbatlas/blob/master/website/docs/r/private_ip_mode.html.markdown.
type PrivateIpMode struct {
	s *pulumi.ResourceState
}

// NewPrivateIpMode registers a new resource with the given unique name, arguments, and options.
func NewPrivateIpMode(ctx *pulumi.Context,
	name string, args *PrivateIpModeArgs, opts ...pulumi.ResourceOpt) (*PrivateIpMode, error) {
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["enabled"] = nil
		inputs["projectId"] = nil
	} else {
		inputs["enabled"] = args.Enabled
		inputs["projectId"] = args.ProjectId
	}
	s, err := ctx.RegisterResource("mongodbatlas:index/privateIpMode:PrivateIpMode", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PrivateIpMode{s: s}, nil
}

// GetPrivateIpMode gets an existing PrivateIpMode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateIpMode(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PrivateIpModeState, opts ...pulumi.ResourceOpt) (*PrivateIpMode, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["enabled"] = state.Enabled
		inputs["projectId"] = state.ProjectId
	}
	s, err := ctx.ReadResource("mongodbatlas:index/privateIpMode:PrivateIpMode", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PrivateIpMode{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PrivateIpMode) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PrivateIpMode) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Indicates whether Connect via Peering Only mode is enabled or disabled for an Atlas project.
func (r *PrivateIpMode) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// The unique ID for the project to enable Only Private IP Mode.
func (r *PrivateIpMode) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// Input properties used for looking up and filtering PrivateIpMode resources.
type PrivateIpModeState struct {
	// Indicates whether Connect via Peering Only mode is enabled or disabled for an Atlas project.
	Enabled interface{}
	// The unique ID for the project to enable Only Private IP Mode.
	ProjectId interface{}
}

// The set of arguments for constructing a PrivateIpMode resource.
type PrivateIpModeArgs struct {
	// Indicates whether Connect via Peering Only mode is enabled or disabled for an Atlas project.
	Enabled interface{}
	// The unique ID for the project to enable Only Private IP Mode.
	ProjectId interface{}
}
