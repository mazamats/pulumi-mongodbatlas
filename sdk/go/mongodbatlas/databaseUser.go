// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-mongodbatlas/blob/master/website/docs/r/database_user.html.markdown.
type DatabaseUser struct {
	s *pulumi.ResourceState
}

// NewDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewDatabaseUser(ctx *pulumi.Context,
	name string, args *DatabaseUserArgs, opts ...pulumi.ResourceOpt) (*DatabaseUser, error) {
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["databaseName"] = nil
		inputs["password"] = nil
		inputs["projectId"] = nil
		inputs["roles"] = nil
		inputs["username"] = nil
	} else {
		inputs["databaseName"] = args.DatabaseName
		inputs["password"] = args.Password
		inputs["projectId"] = args.ProjectId
		inputs["roles"] = args.Roles
		inputs["username"] = args.Username
	}
	s, err := ctx.RegisterResource("mongodbatlas:index/databaseUser:DatabaseUser", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatabaseUser{s: s}, nil
}

// GetDatabaseUser gets an existing DatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatabaseUserState, opts ...pulumi.ResourceOpt) (*DatabaseUser, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["databaseName"] = state.DatabaseName
		inputs["password"] = state.Password
		inputs["projectId"] = state.ProjectId
		inputs["roles"] = state.Roles
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("mongodbatlas:index/databaseUser:DatabaseUser", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatabaseUser{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DatabaseUser) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DatabaseUser) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
func (r *DatabaseUser) DatabaseName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["databaseName"])
}

// User's initial password. This is required to create the user but may be removed after. Password may show up in logs, and it will be stored in the state file as plain-text. Password can be changed in the web interface to increase security.
func (r *DatabaseUser) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// The unique ID for the project to create the database user.
func (r *DatabaseUser) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
func (r *DatabaseUser) Roles() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["roles"])
}

// Username for authenticating to MongoDB.
func (r *DatabaseUser) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering DatabaseUser resources.
type DatabaseUserState struct {
	// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
	DatabaseName interface{}
	// User's initial password. This is required to create the user but may be removed after. Password may show up in logs, and it will be stored in the state file as plain-text. Password can be changed in the web interface to increase security.
	Password interface{}
	// The unique ID for the project to create the database user.
	ProjectId interface{}
	// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
	Roles interface{}
	// Username for authenticating to MongoDB.
	Username interface{}
}

// The set of arguments for constructing a DatabaseUser resource.
type DatabaseUserArgs struct {
	// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
	DatabaseName interface{}
	// User's initial password. This is required to create the user but may be removed after. Password may show up in logs, and it will be stored in the state file as plain-text. Password can be changed in the web interface to increase security.
	Password interface{}
	// The unique ID for the project to create the database user.
	ProjectId interface{}
	// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
	Roles interface{}
	// Username for authenticating to MongoDB.
	Username interface{}
}
