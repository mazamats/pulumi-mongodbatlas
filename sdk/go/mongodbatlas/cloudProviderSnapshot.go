// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `.CloudProviderSnapshot` provides a resource to take a cloud provider snapshot on demand.
// On-demand snapshots happen immediately, unlike scheduled snapshots which occur at regular intervals. If there is already an on-demand snapshot with a status of queued or inProgress, you must wait until Atlas has completed the on-demand snapshot before taking another.
// 
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-mongodbatlas/blob/master/website/docs/r/cloud_provider_snapshot.html.markdown.
type CloudProviderSnapshot struct {
	s *pulumi.ResourceState
}

// NewCloudProviderSnapshot registers a new resource with the given unique name, arguments, and options.
func NewCloudProviderSnapshot(ctx *pulumi.Context,
	name string, args *CloudProviderSnapshotArgs, opts ...pulumi.ResourceOpt) (*CloudProviderSnapshot, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.Description == nil {
		return nil, errors.New("missing required argument 'Description'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.RetentionInDays == nil {
		return nil, errors.New("missing required argument 'RetentionInDays'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clusterName"] = nil
		inputs["description"] = nil
		inputs["projectId"] = nil
		inputs["retentionInDays"] = nil
	} else {
		inputs["clusterName"] = args.ClusterName
		inputs["description"] = args.Description
		inputs["projectId"] = args.ProjectId
		inputs["retentionInDays"] = args.RetentionInDays
	}
	inputs["createdAt"] = nil
	inputs["expiresAt"] = nil
	inputs["masterKeyUuid"] = nil
	inputs["mongodVersion"] = nil
	inputs["snapshotId"] = nil
	inputs["snapshotType"] = nil
	inputs["status"] = nil
	inputs["storageSizeBytes"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("mongodbatlas:index/cloudProviderSnapshot:CloudProviderSnapshot", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CloudProviderSnapshot{s: s}, nil
}

// GetCloudProviderSnapshot gets an existing CloudProviderSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProviderSnapshot(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CloudProviderSnapshotState, opts ...pulumi.ResourceOpt) (*CloudProviderSnapshot, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clusterName"] = state.ClusterName
		inputs["createdAt"] = state.CreatedAt
		inputs["description"] = state.Description
		inputs["expiresAt"] = state.ExpiresAt
		inputs["masterKeyUuid"] = state.MasterKeyUuid
		inputs["mongodVersion"] = state.MongodVersion
		inputs["projectId"] = state.ProjectId
		inputs["retentionInDays"] = state.RetentionInDays
		inputs["snapshotId"] = state.SnapshotId
		inputs["snapshotType"] = state.SnapshotType
		inputs["status"] = state.Status
		inputs["storageSizeBytes"] = state.StorageSizeBytes
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("mongodbatlas:index/cloudProviderSnapshot:CloudProviderSnapshot", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CloudProviderSnapshot{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CloudProviderSnapshot) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CloudProviderSnapshot) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the Atlas cluster that contains the snapshots you want to retrieve.
func (r *CloudProviderSnapshot) ClusterName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterName"])
}

// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
func (r *CloudProviderSnapshot) CreatedAt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["createdAt"])
}

// Description of the on-demand snapshot.
func (r *CloudProviderSnapshot) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
func (r *CloudProviderSnapshot) ExpiresAt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["expiresAt"])
}

// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
func (r *CloudProviderSnapshot) MasterKeyUuid() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["masterKeyUuid"])
}

// Version of the MongoDB server.
func (r *CloudProviderSnapshot) MongodVersion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["mongodVersion"])
}

// The unique identifier of the project for the Atlas cluster.
func (r *CloudProviderSnapshot) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
func (r *CloudProviderSnapshot) RetentionInDays() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["retentionInDays"])
}

// Unique identifier of the snapshot.
func (r *CloudProviderSnapshot) SnapshotId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["snapshotId"])
}

// Specified the type of snapshot. Valid values are onDemand and scheduled.
func (r *CloudProviderSnapshot) SnapshotType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["snapshotType"])
}

// Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.
func (r *CloudProviderSnapshot) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// Specifies the size of the snapshot in bytes.
func (r *CloudProviderSnapshot) StorageSizeBytes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["storageSizeBytes"])
}

// Specifies the type of cluster: replicaSet or shardedCluster.
func (r *CloudProviderSnapshot) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering CloudProviderSnapshot resources.
type CloudProviderSnapshotState struct {
	// The name of the Atlas cluster that contains the snapshots you want to retrieve.
	ClusterName interface{}
	// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
	CreatedAt interface{}
	// Description of the on-demand snapshot.
	Description interface{}
	// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
	ExpiresAt interface{}
	// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
	MasterKeyUuid interface{}
	// Version of the MongoDB server.
	MongodVersion interface{}
	// The unique identifier of the project for the Atlas cluster.
	ProjectId interface{}
	// The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
	RetentionInDays interface{}
	// Unique identifier of the snapshot.
	SnapshotId interface{}
	// Specified the type of snapshot. Valid values are onDemand and scheduled.
	SnapshotType interface{}
	// Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.
	Status interface{}
	// Specifies the size of the snapshot in bytes.
	StorageSizeBytes interface{}
	// Specifies the type of cluster: replicaSet or shardedCluster.
	Type interface{}
}

// The set of arguments for constructing a CloudProviderSnapshot resource.
type CloudProviderSnapshotArgs struct {
	// The name of the Atlas cluster that contains the snapshots you want to retrieve.
	ClusterName interface{}
	// Description of the on-demand snapshot.
	Description interface{}
	// The unique identifier of the project for the Atlas cluster.
	ProjectId interface{}
	// The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
	RetentionInDays interface{}
}
