// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `.CloudProviderSnapshotRestoreJob` provides a resource to create a new restore job from a cloud provider snapshot of a specified cluster. The restore job can be one of two types: 
// * **automated:** Atlas automatically restores the snapshot with snapshotId to the Atlas cluster with name targetClusterName in the Atlas project with targetGroupId.
// 
// * **download:** Atlas provides a URL to download a .tar.gz of the snapshot with snapshotId. The contents of the archive contain the data files for your Atlas cluster.
// 
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-mongodbatlas/blob/master/website/docs/r/cloud_provider_snapshot_restore_job.html.markdown.
type CloudProviderSnapshotRestoreJob struct {
	s *pulumi.ResourceState
}

// NewCloudProviderSnapshotRestoreJob registers a new resource with the given unique name, arguments, and options.
func NewCloudProviderSnapshotRestoreJob(ctx *pulumi.Context,
	name string, args *CloudProviderSnapshotRestoreJobArgs, opts ...pulumi.ResourceOpt) (*CloudProviderSnapshotRestoreJob, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.DeliveryType == nil {
		return nil, errors.New("missing required argument 'DeliveryType'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.SnapshotId == nil {
		return nil, errors.New("missing required argument 'SnapshotId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clusterName"] = nil
		inputs["deliveryType"] = nil
		inputs["projectId"] = nil
		inputs["snapshotId"] = nil
	} else {
		inputs["clusterName"] = args.ClusterName
		inputs["deliveryType"] = args.DeliveryType
		inputs["projectId"] = args.ProjectId
		inputs["snapshotId"] = args.SnapshotId
	}
	inputs["cancelled"] = nil
	inputs["createdAt"] = nil
	inputs["deliveryUrls"] = nil
	inputs["expired"] = nil
	inputs["expiresAt"] = nil
	inputs["finishedAt"] = nil
	inputs["snapshotRestoreJobId"] = nil
	inputs["timestamp"] = nil
	s, err := ctx.RegisterResource("mongodbatlas:index/cloudProviderSnapshotRestoreJob:CloudProviderSnapshotRestoreJob", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CloudProviderSnapshotRestoreJob{s: s}, nil
}

// GetCloudProviderSnapshotRestoreJob gets an existing CloudProviderSnapshotRestoreJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProviderSnapshotRestoreJob(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CloudProviderSnapshotRestoreJobState, opts ...pulumi.ResourceOpt) (*CloudProviderSnapshotRestoreJob, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cancelled"] = state.Cancelled
		inputs["clusterName"] = state.ClusterName
		inputs["createdAt"] = state.CreatedAt
		inputs["deliveryType"] = state.DeliveryType
		inputs["deliveryUrls"] = state.DeliveryUrls
		inputs["expired"] = state.Expired
		inputs["expiresAt"] = state.ExpiresAt
		inputs["finishedAt"] = state.FinishedAt
		inputs["projectId"] = state.ProjectId
		inputs["snapshotId"] = state.SnapshotId
		inputs["snapshotRestoreJobId"] = state.SnapshotRestoreJobId
		inputs["timestamp"] = state.Timestamp
	}
	s, err := ctx.ReadResource("mongodbatlas:index/cloudProviderSnapshotRestoreJob:CloudProviderSnapshotRestoreJob", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CloudProviderSnapshotRestoreJob{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CloudProviderSnapshotRestoreJob) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CloudProviderSnapshotRestoreJob) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Indicates whether the restore job was canceled.
func (r *CloudProviderSnapshotRestoreJob) Cancelled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["cancelled"])
}

// The name of the Atlas cluster whose snapshot you want to restore.
func (r *CloudProviderSnapshotRestoreJob) ClusterName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterName"])
}

// UTC ISO 8601 formatted point in time when Atlas created the restore job.
func (r *CloudProviderSnapshotRestoreJob) CreatedAt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["createdAt"])
}

// Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.
func (r *CloudProviderSnapshotRestoreJob) DeliveryType() pulumi.Output {
	return r.s.State["deliveryType"]
}

// One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.
func (r *CloudProviderSnapshotRestoreJob) DeliveryUrls() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["deliveryUrls"])
}

// Indicates whether the restore job expired.
func (r *CloudProviderSnapshotRestoreJob) Expired() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["expired"])
}

// UTC ISO 8601 formatted point in time when the restore job expires.
func (r *CloudProviderSnapshotRestoreJob) ExpiresAt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["expiresAt"])
}

// UTC ISO 8601 formatted point in time when the restore job completed.
func (r *CloudProviderSnapshotRestoreJob) FinishedAt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["finishedAt"])
}

// The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
func (r *CloudProviderSnapshotRestoreJob) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// Unique identifier of the snapshot to restore.
func (r *CloudProviderSnapshotRestoreJob) SnapshotId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["snapshotId"])
}

// The unique identifier of the restore job.
func (r *CloudProviderSnapshotRestoreJob) SnapshotRestoreJobId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["snapshotRestoreJobId"])
}

// Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.
func (r *CloudProviderSnapshotRestoreJob) Timestamp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["timestamp"])
}

// Input properties used for looking up and filtering CloudProviderSnapshotRestoreJob resources.
type CloudProviderSnapshotRestoreJobState struct {
	// Indicates whether the restore job was canceled.
	Cancelled interface{}
	// The name of the Atlas cluster whose snapshot you want to restore.
	ClusterName interface{}
	// UTC ISO 8601 formatted point in time when Atlas created the restore job.
	CreatedAt interface{}
	// Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.
	DeliveryType interface{}
	// One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.
	DeliveryUrls interface{}
	// Indicates whether the restore job expired.
	Expired interface{}
	// UTC ISO 8601 formatted point in time when the restore job expires.
	ExpiresAt interface{}
	// UTC ISO 8601 formatted point in time when the restore job completed.
	FinishedAt interface{}
	// The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
	ProjectId interface{}
	// Unique identifier of the snapshot to restore.
	SnapshotId interface{}
	// The unique identifier of the restore job.
	SnapshotRestoreJobId interface{}
	// Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.
	Timestamp interface{}
}

// The set of arguments for constructing a CloudProviderSnapshotRestoreJob resource.
type CloudProviderSnapshotRestoreJobArgs struct {
	// The name of the Atlas cluster whose snapshot you want to restore.
	ClusterName interface{}
	// Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.
	DeliveryType interface{}
	// The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
	ProjectId interface{}
	// Unique identifier of the snapshot to restore.
	SnapshotId interface{}
}
